
#pragma kernel CollisionDetection

#pragma kernel CollisionReponse

#pragma kernel DyncamicValues

#define GROUP_SIZEX 256




struct Ball
{
	float3 position;
	float3 force;
	float3 velocity;
	float4 color;
    float mass;
};
RWStructuredBuffer<Ball> ballsBuffer;

float deltaTime;
int ballsCount;
float radius;
float3 maxBounds;
float3 minBounds;



inline bool isBallCollisionX(float posX)
{
	return posX >= minBounds.x && posX <=maxBounds.x;
}

inline bool isBallCollisionY(float posY)
{
	return posY >= minBounds.y && posY <=maxBounds.y;
}

inline bool isBallCollisionZ(float posZ)
{
	return posZ >= minBounds.z && posZ <=maxBounds.z;
}






[numthreads(GROUP_SIZEX,1,1)]
void CollisionDetection (uint3 id : SV_DispatchThreadID)
{
	float3 gravityConstant = float3(0,-2,0);
    //first handle collision with the box collider
    Ball ball = ballsBuffer[id.x];
    //simulating gravity
    ball.force += gravityConstant * ball.mass; 

    ball.velocity += ball.force / ball.mass * deltaTime; 
    
    float3 currentPos = ball.position;
    
    bool isInsideBox = isBallCollisionX(currentPos.x) 
                    && isBallCollisionY(currentPos.y) 
                    && isBallCollisionZ(currentPos.z);

    if (!isInsideBox)
    {
        
		ball.velocity = -ball.velocity;
		ball.velocity *= 0.98;
		
		
    }

	ball.force *= 0.7;
	ballsBuffer[id.x] = ball;
	

}



[numthreads(GROUP_SIZEX,1,1)]
void CollisionReponse (uint3 id : SV_DispatchThreadID)
{
    Ball ball1 = ballsBuffer[id.x];

    for (int i = id.x + 1; i < ballsCount; i++)
    {
        Ball ball2 = ballsBuffer[i];

        float3 dist = ball2.position - ball1.position;
        float distLength = length(dist);

        if (distLength < 2 * radius) //collision
        {
            // Calculate the normal vector and the relative velocity
            float3 normal = normalize(dist);
            float3 relativeVelocity = ball2.velocity - ball1.velocity;

            // Calculate the impulse along the normal
            float impulse = dot(relativeVelocity, normal);

            // Update the velocities of both balls based on the collision
            ball1.velocity += impulse * normal;
            ball2.velocity -= impulse * normal;


            // Update the balls in the buffer
            ballsBuffer[i] = ball2;
        }
    }

    // Update the current ball in the buffer
    ballsBuffer[id.x] = ball1;
}



[numthreads(GROUP_SIZEX,1,1)]
void DyncamicValues (uint3 id : SV_DispatchThreadID)
{
   	Ball ball = ballsBuffer[id.x];
    
    ball.position += ball.velocity * deltaTime; 
    //ball.position += ball.force;
	//reset the force
    ball.force = float3(0,0,0);
    
    ballsBuffer[id.x] = ball;

}
